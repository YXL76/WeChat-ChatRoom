<template>
  <view class="container {{ theme }} flex flex-column align-center">
    <block wx:for="{{ messageList }}" wx:key="unique">
      <block wx:if="{{ item.type === 'text' }}">
        <view class="message flex {{ item.avatarUrl === userInfo.avatarUrl ? 'flex-row-reverse' : 'flex-row' }}">
          <image class="avatar" src="{{ item.avatarUrl }}" />
          <view class="flex flex-column {{ item.avatarUrl === userInfo.avatarUrl ? 'align-end' : 'align-start' }}">
            <view>
              <text class="nickname {{ theme }}">{{ item.nickName }}</text>
            </view>
            <view class="content {{ theme }} {{ item.avatarUrl === userInfo.avatarUrl ? 'user' : 'other' }}">
              {{ item.content }}
            </view>
          </view>
        </view>
      </block>
      <block wx:elif="{{ item.type === 'system' && systemNum }}">
        <view class="system">{{ item.content }}</view>
      </block>
      <block wx:elif="{{ item.type === 'systemIn' && systemIn }}">
        <view class="system">{{ item.content }}</view>
      </block>
      <block wx:elif="{{ item.type === 'systemOut' && systemOut }}">
        <view class="system">{{ item.content }}</view>
      </block>
    </block>
    <view style="height: 108rpx"></view>
  </view>
  <view class="input-panel {{ theme }} flex flex-row align-center space-around">
    <view class="iconfont iconshezhi icon {{ theme }}" bindtap="toSetting" />
    <view class="iconfont iconshijian icon {{ theme }}" bindtap="toHistory" />
    <view class="input-container">
      <input class="input {{ theme }}" wx:model="{{ message }}" confirm-type="send" bindconfirm="sendMessage" />
    </view>
    <view class="send {{ theme }}" bindtap="sendMessage">发送</view>
  </view>
</template>

<script>
import { createPage } from '@mpxjs/core'

createPage({

  options: {
    pureDataPattern: /^_/
  },

  data: {
    theme: 'Grey',
    systemIn: true,
    systemOut: true,
    systemNum: true,
    _anonymous: false,
    _anonymousName: '匿名用户^_^',
    message: '',
    messageList: [],
    userInfo: {}
  },

  attached () {
    const that = this
    this.getData()
    wx.getUserInfo({ success: function (res) { that.setData({ userInfo: res.userInfo }) } })
    wx.showLoading({ title: '正在进入聊天室', mask: true })
    this.connect()
  },

  detached () {
    let that = this
    if (!that.data._anonymous) {
      wx.sendSocketMessage({
        data: '{ "content": "' + that.data.userInfo.nickName + '退出了聊天室' + '", "type": "systemOut", "nickName": "' + '' + '", "avatarUrl": "' + '' + '" }',
        complete () {
          wx.closeSocket()
          wx.onSocketClose(function (res) { console.log('close success') })
        }
      })
    } else {
      wx.closeSocket()
      wx.onSocketClose(function (res) { console.log('close success') })
    }
    wx.getStorage({
      key: 'chatHistory',
      success (res) {
        let length = res.data.length + that.data.messageList.length
        wx.setStorage({
          key: 'chatHistory',
          data: res.data.concat(that.data.messageList).slice(length > 99 ? length - 99 : 0)
        })
      },
      fail () {
        let length = +that.data.messageList.length
        wx.setStorage({
          key: 'chatHistory',
          data: that.data.messageList.slice(length > 99 ? length - 99 : 0)
        })
      }
    })
  },

  onShow () {
    setTimeout(() => {
      this.getData()
    }, 400)
  },

  methods: {

    connect () {
      const that = this
      wx.connectSocket({
        url: 'ws://localhost:3000/',
        complete () {
          wx.hideLoading()
        }
      })
      wx.onSocketOpen(function (res) {
        console.log('open success')
        wx.onSocketMessage(function (res) {
          let list = that.data.messageList
          let newItem = JSON.parse(res.data)
          list.push(newItem)
          that.setData({ messageList: list })
          if (newItem.type === 'text') that.toBottom()
        })
        if (!that.data._anonymous) {
          wx.sendSocketMessage({ data: '{ "content": "' + that.data.userInfo.nickName + '进入了聊天室' + '", "type": "systemIn", "nickName": "' + '' + '", "avatarUrl": "' + '' + '" }' })
        }
      })
      wx.onSocketError(function (res) {
        wx.showToast({
          title: '无法连接服务器，请重试',
          icon: 'none',
          duration: 3000
        })
      })
    },

    getData () {
      const that = this
      wx.getStorage({
        key: 'theme',
        success (res) { that.setData({ theme: res.data }) }
      })
      wx.getStorage({
        key: 'systemIn',
        success (res) { that.setData({ systemIn: res.data }) }
      })
      wx.getStorage({
        key: 'systemOut',
        success (res) { that.setData({ systemOut: res.data }) }
      })
      wx.getStorage({
        key: 'systemNum',
        success (res) { that.setData({ systemNum: res.data }) }
      })
      wx.getStorage({
        key: 'anonymous',
        success (res) { that.setData({ _anonymous: res.data }) }
      })
      wx.getStorage({
        key: 'anonymousName',
        success (res) { that.setData({ _anonymousName: res.data }) }
      })
    },

    sendMessage () {
      if (this.data.message === '') return
      const that = this
      const mes = that.data.message
      that.setData({ message: '' })
      let temp = ''
      if (that.data._anonymous) temp = '{ "content": "' + mes + '", "type": "text", "nickName": "[匿名]' + that.data._anonymousName + '", "avatarUrl": "' + that.data.userInfo.avatarUrl + '" }'
      else temp = '{ "content": "' + mes + '", "type": "text", "nickName": "' + that.data.userInfo.nickName + '", "avatarUrl": "' + that.data.userInfo.avatarUrl + '" }'
      wx.sendSocketMessage({
        data: temp,
        success (res) { that.toBottom() },
        fail (res) {
          wx.showToast({
            title: '消息发送失败，请重试',
            icon: 'none',
            duration: 2000
          })
        }
      })
    },

    toBottom () {
      wx.pageScrollTo({ scrollTop: 100000, duration: 300 })
    },

    toSetting () {
      wx.navigateTo({ url: '../setting/setting' })
    },

    toHistory () {
      wx.navigateTo({ url: '../history/history' })
    }
  }
})
</script>

<style lang="scss" src="../chat.scss"></style>

<script type="application/json">
  {
    "navigationBarTitleText": "聊天室"
  }
</script>